#!/usr/bin/env python

"""git pull-request

Automatically check out github pull requests into their own branch.

Usage:

    git pull-request <OPTIONS> [<pull request number>]

Options:

    -h, --help
        Display this message and exit

    -r <repo>, --repo <repo>
        Use this github repo instead of the 'remote origin' or 'github.repo'
        git config settings. Needs to be in "user/repository" form

Copyright (C) 2011 by Andreas Gohr <andi@splitbrain.org>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""
import sys
import base64
import getopt
import json
import urllib2
import os
import re
from textwrap import fill

def main():
    repo, remote = '', None

    # parse command line options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hr:", ["help","repo:"])
    except getopt.error, msg:
        print msg
        print "for help use --help"
        sys.exit(1)
    # process options
    for o, a in opts:
        if o in ("-h", "--help"):
            print __doc__
            sys.exit(0)
        if o in ("-r", "--repo"):
            if re.search('/', a):
              repo = a
            else:  
              remote = a

    if remote is None and repo == '':
        remote = 'origin'

    # get repo name from git config:
    if repo == '':
        repo = os.popen('git config github.repo').read().strip()

    # get repo name from origin
    if repo == '' or remote != None:
        origin = os.popen('git remote -v').read()
        m = re.search("^%s[^\n]+github\.com[:/]([^.]+)\.git[ \t]+\(fetch\)$" % remote, origin, re.MULTILINE)
        if(m != None and m.group(1) != ''):
            repo = m.group(1)

    if repo == '':
        print color_text("Failed to determine github repository name",'red',True)
        print "The repository is usually automatically detected from your remote origin."
        print "If your origin doesn't point to github, you can specify the repository on"
        print "the command line using the -r parameter, by specifying either a remote or"
        print "the full repository name (user/repo), or configure it using"
        print "git config github.repo <user>/<repository>"
        sys.exit(1)

    # process arguments
    try:
        global user 
        global token
        user = "%s/token" % os.popen('git config github.user').read().strip()
        token = os.popen('git config github.token').read().strip()

        if len(args):
            if args[0] == "update":
                update(repo)
            elif args[0] == "merge":
                merge()
            elif args[0] == "open":
                if len(args) >= 2:
                    open(repo, args[1])
                else:
                    open(repo)
            else:
                fetch(repo, args[0])
        else:
            show(repo)
    except UserWarning, e:
        print color_text(e, 'red')
        sys.exit(1)

def display(pr):
    """Nicely display info about a given pull request"""
    print "%s - %s by %s (%s)" % (color_text("REQUEST %s" % pr.get('number'), 'magenta', True), color_text(pr.get('title'), 'red'), color_text(pr['user'].get('name'), 'blue'), pr['user'].get('login'))
    print "    %s" % color_text(pr.get('html_url'), 'cyan')
    if pr.get('body').strip():
        print fill(pr.get('body'), initial_indent="    ", subsequent_indent="    ", width=80)

    print

def open(repo, pullreq=None):
    """Open a pull request in the browser"""

    if pullreq == None:
        branch, pullreq = get_current_branch()

    pr = get_pull_request_info(repo, pullreq)

    os.system('open %s' % (pr.get('html_url')))

def show(repo):
    """List open pull requests

    Queries the github API for open pull requests in the current repo
    """

    print "loading open pull requests for %s..." % repo
    print

    url = "http://github.com/api/v2/json/pulls/%s/open" % repo
    req = urllib2.Request(url)

    authorize_request(req)

    try:
      response = urllib2.urlopen(req)
    except urllib2.HTTPError, msg:
      raise UserWarning("Error loading pull requests for repo %s: %s" % (repo, msg))

    data = response.read()
    if data == '':
        raise UserWarning("Failed to speak with github")

    data = json.loads(data)
    #print json.dumps(data,sort_keys=True, indent=4)

    for pr in data['pulls']:
        display(pr)

def fetch(repo, pullreq):
    """Fetches a pull request into a local branch"""
    print "loading pull request info for request %s..." % pullreq
    print
    
    pr = get_pull_request_info(repo, pullreq)
    local  = 'pull-request-%s' % pullreq
    repo_url = pr['head']['repository']['url'].replace('https', 'git')

    print "pulling from %s (%s)" % (repo_url, pr['head']['ref'])

    ret = os.system('git fetch %s %s:%s' % (repo_url, pr['head']['ref'], local))
    if ret != 0:
        raise UserWarning("Fetch failed")
    
    ret = os.system('git checkout %s' % local)
    if ret != 0:
        raise UserWarning("Could not switch to pull request branch")

    print
    print color_text("done. examine changes and merge into master",'green')

def update(repo):
    """Merges changes from the remote branch into the local branch of the pull request"""
    branch, pullreq = get_current_branch()
    
    pr = get_pull_request_info(repo, pullreq)
    local = 'pull-request-%s' % pullreq
    repo_url = pr['head']['repository']['url'].replace('https', 'git')
    
    print "pulling from %s (%s)" % (repo_url, pr['head']['ref'])
    ret = os.system('git pull %s %s' % (repo_url, pr['head']['ref']))
    if ret != 0:
        raise UserWarning("Pull failed, resolve conflicts")
    
    print
    print color_text("done", 'green')

def merge():
    """Merges changes from the local pull request branch into master and deletes the pull request branch"""
    branch, pullreq = get_current_branch()
    
    print "Merging current branch with master"
    ret = os.system('git checkout master')
    if ret != 0:
        raise UserWarning("Could not checkout master")
    
    ret = os.system('git merge %s' % branch)
    if ret != 0:
        raise UserWarning("Merge with master failed. Resolve conflicts, switch back into the pull request branch, and merge again")
    
    print "Deleting pull request branch"
    ret = os.system('git branch -D %s' % branch)
    if ret != 0:
        raise UserWarning("Could not delete branch")
    
    print
    print color_text("done", 'green')

def get_pull_request_info(repo, pullreq):
    url = "http://github.com/api/v2/json/pulls/%s/%s" % (repo, pullreq)
    req = urllib2.Request(url)

    authorize_request(req)

    try:
      response = urllib2.urlopen(req)
    except urllib2.HTTPError, msg:
      raise UserWarning("Error loading info on pull request %s from repo %s: %s" % (pullreq, repo, msg))
    
    data = response.read()
    if (data == ''):
        raise UserWarning("Failed to speak with github")

    data = json.loads(data)
    pr = data['pull']
    display(pr)
    
    return pr

def authorize_request(req):
    """Add the Authorize header to the passed request"""
    base64string = base64.encodestring('%s:%s' % (user, token)).replace('\n', '')
    req.add_header("Authorization", "Basic %s" % base64string)

def get_current_branch():
    branch = os.popen("git rev-parse --abbrev-ref HEAD").read().strip()
    
    if branch[0:13] != 'pull-request-':
        raise UserWarning("Invalid branch: not a pull request")
    
    pullreq = int(branch[13:])
    
    return (branch, pullreq)

def color_text(text, color_name, bold=False):
    """Return the given text in ANSI colors

    From http://travelingfrontiers.wordpress.com/2010/08/22/how-to-add-colors-to-linux-command-line-output/"""
    
    colors = (
        'black', 'red', 'green', 'yellow',
        'blue', 'magenta', 'cyan', 'white'
    )

    if not sys.stdout.isatty():
        return text

    if color_name in colors:
        return u"\033[{0};{1}m{2}\033[0m".format(
            int(bold),
            colors.index(color_name) + 30,
            text)
    else:
        return text

if __name__ == "__main__":
    main()

